// Generated by Dagger (https://dagger.dev).
package com.example.basemvvm.di.component;

import android.app.Application;
import androidx.lifecycle.ViewModel;
import com.example.basemvvm.AppApplication;
import com.example.basemvvm.data.repository.ApiRepository;
import com.example.basemvvm.data.repository.ApiRepository_Factory;
import com.example.basemvvm.data.repository.IApiRepository;
import com.example.basemvvm.di.module.ActivityBindingModule_BindListCategoryFragment;
import com.example.basemvvm.di.module.ActivityBindingModule_BindLoginFragment;
import com.example.basemvvm.di.module.ActivityBindingModule_BindMainActivity;
import com.example.basemvvm.di.module.ActivityBindingModule_BindRegisterFragment;
import com.example.basemvvm.di.module.ActivityBindingModule_BindSignupFragment;
import com.example.basemvvm.di.module.ActivityBindingModule_BindSplashFragment;
import com.example.basemvvm.di.module.NetworkModule;
import com.example.basemvvm.di.module.NetworkModule_ProvideApiServiceFactory;
import com.example.basemvvm.di.module.NetworkModule_ProvideHttpClientFactory;
import com.example.basemvvm.di.module.NetworkModule_ProvideRetrofitFactory;
import com.example.basemvvm.di.util.ViewModelFactory;
import com.example.basemvvm.di.util.ViewModelFactory_Factory;
import com.example.basemvvm.ui.base.BaseActivity_MembersInjector;
import com.example.basemvvm.ui.base.BaseFragment_MembersInjector;
import com.example.basemvvm.ui.list_category.ListCategoryFragment;
import com.example.basemvvm.ui.list_category.ListCategoryViewModel;
import com.example.basemvvm.ui.list_category.ListCategoryViewModel_Factory;
import com.example.basemvvm.ui.login.LoginFragment;
import com.example.basemvvm.ui.login.LoginViewModel;
import com.example.basemvvm.ui.login.LoginViewModel_Factory;
import com.example.basemvvm.ui.main.MainActivity;
import com.example.basemvvm.ui.main.MainViewModel;
import com.example.basemvvm.ui.main.MainViewModel_Factory;
import com.example.basemvvm.ui.register.RegisterFragment;
import com.example.basemvvm.ui.register.RegisterViewModel;
import com.example.basemvvm.ui.register.RegisterViewModel_Factory;
import com.example.basemvvm.ui.signup.SignupFragment;
import com.example.basemvvm.ui.signup.SignupViewModel;
import com.example.basemvvm.ui.signup.SignupViewModel_Factory;
import com.example.basemvvm.ui.splash.SplashFragment;
import com.example.basemvvm.ui.splash.SplashViewModel;
import com.example.basemvvm.ui.splash.SplashViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBindingModule_BindMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_BindSplashFragment.SplashFragmentSubcomponent.Factory> splashFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_BindRegisterFragment.RegisterFragmentSubcomponent.Factory> registerFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_BindSignupFragment.SignupFragmentSubcomponent.Factory> signupFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_BindLoginFragment.LoginFragmentSubcomponent.Factory> loginFragmentSubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_BindListCategoryFragment.ListCategoryFragmentSubcomponent.Factory> listCategoryFragmentSubcomponentFactoryProvider;

  private Provider<OkHttpClient> provideHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<IApiRepository> provideApiServiceProvider;

  private Provider<ApiRepository> apiRepositoryProvider;

  private Provider<MainViewModel> mainViewModelProvider;

  private Provider<SplashViewModel> splashViewModelProvider;

  private Provider<RegisterViewModel> registerViewModelProvider;

  private Provider<SignupViewModel> signupViewModelProvider;

  private Provider<LoginViewModel> loginViewModelProvider;

  private Provider<ListCategoryViewModel> listCategoryViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(NetworkModule networkModuleParam, Application application) {

    initialize(networkModuleParam, application);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(6).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(SplashFragment.class, (Provider) splashFragmentSubcomponentFactoryProvider).put(RegisterFragment.class, (Provider) registerFragmentSubcomponentFactoryProvider).put(SignupFragment.class, (Provider) signupFragmentSubcomponentFactoryProvider).put(LoginFragment.class, (Provider) loginFragmentSubcomponentFactoryProvider).put(ListCategoryFragment.class, (Provider) listCategoryFragmentSubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final NetworkModule networkModuleParam, final Application application) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_BindMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_BindMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.splashFragmentSubcomponentFactoryProvider = new Provider<ActivityBindingModule_BindSplashFragment.SplashFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_BindSplashFragment.SplashFragmentSubcomponent.Factory get() {
        return new SplashFragmentSubcomponentFactory();}
    };
    this.registerFragmentSubcomponentFactoryProvider = new Provider<ActivityBindingModule_BindRegisterFragment.RegisterFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_BindRegisterFragment.RegisterFragmentSubcomponent.Factory get() {
        return new RegisterFragmentSubcomponentFactory();}
    };
    this.signupFragmentSubcomponentFactoryProvider = new Provider<ActivityBindingModule_BindSignupFragment.SignupFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_BindSignupFragment.SignupFragmentSubcomponent.Factory get() {
        return new SignupFragmentSubcomponentFactory();}
    };
    this.loginFragmentSubcomponentFactoryProvider = new Provider<ActivityBindingModule_BindLoginFragment.LoginFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_BindLoginFragment.LoginFragmentSubcomponent.Factory get() {
        return new LoginFragmentSubcomponentFactory();}
    };
    this.listCategoryFragmentSubcomponentFactoryProvider = new Provider<ActivityBindingModule_BindListCategoryFragment.ListCategoryFragmentSubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_BindListCategoryFragment.ListCategoryFragmentSubcomponent.Factory get(
          ) {
        return new ListCategoryFragmentSubcomponentFactory();}
    };
    this.provideHttpClientProvider = DoubleCheck.provider(NetworkModule_ProvideHttpClientFactory.create(networkModuleParam));
    this.provideRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvideRetrofitFactory.create(networkModuleParam, provideHttpClientProvider));
    this.provideApiServiceProvider = DoubleCheck.provider(NetworkModule_ProvideApiServiceFactory.create(networkModuleParam, provideRetrofitProvider));
    this.apiRepositoryProvider = ApiRepository_Factory.create(provideApiServiceProvider);
    this.mainViewModelProvider = MainViewModel_Factory.create(apiRepositoryProvider);
    this.splashViewModelProvider = SplashViewModel_Factory.create(apiRepositoryProvider);
    this.registerViewModelProvider = RegisterViewModel_Factory.create(apiRepositoryProvider);
    this.signupViewModelProvider = SignupViewModel_Factory.create(apiRepositoryProvider);
    this.loginViewModelProvider = LoginViewModel_Factory.create(apiRepositoryProvider);
    this.listCategoryViewModelProvider = ListCategoryViewModel_Factory.create(apiRepositoryProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(6).put(MainViewModel.class, (Provider) mainViewModelProvider).put(SplashViewModel.class, (Provider) splashViewModelProvider).put(RegisterViewModel.class, (Provider) registerViewModelProvider).put(SignupViewModel.class, (Provider) signupViewModelProvider).put(LoginViewModel.class, (Provider) loginViewModelProvider).put(ListCategoryViewModel.class, (Provider) listCategoryViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(AppApplication application) {
    injectAppApplication(application);}

  private AppApplication injectAppApplication(AppApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new NetworkModule(), application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBindingModule_BindMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_BindMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBindingModule_BindMainActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity arg0) {

    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class SplashFragmentSubcomponentFactory implements ActivityBindingModule_BindSplashFragment.SplashFragmentSubcomponent.Factory {
    @Override
    public ActivityBindingModule_BindSplashFragment.SplashFragmentSubcomponent create(
        SplashFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SplashFragmentSubcomponentImpl(arg0);
    }
  }

  private final class SplashFragmentSubcomponentImpl implements ActivityBindingModule_BindSplashFragment.SplashFragmentSubcomponent {
    private SplashFragmentSubcomponentImpl(SplashFragment arg0) {

    }

    @Override
    public void inject(SplashFragment arg0) {
      injectSplashFragment(arg0);}

    private SplashFragment injectSplashFragment(SplashFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class RegisterFragmentSubcomponentFactory implements ActivityBindingModule_BindRegisterFragment.RegisterFragmentSubcomponent.Factory {
    @Override
    public ActivityBindingModule_BindRegisterFragment.RegisterFragmentSubcomponent create(
        RegisterFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new RegisterFragmentSubcomponentImpl(arg0);
    }
  }

  private final class RegisterFragmentSubcomponentImpl implements ActivityBindingModule_BindRegisterFragment.RegisterFragmentSubcomponent {
    private RegisterFragmentSubcomponentImpl(RegisterFragment arg0) {

    }

    @Override
    public void inject(RegisterFragment arg0) {
      injectRegisterFragment(arg0);}

    private RegisterFragment injectRegisterFragment(RegisterFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class SignupFragmentSubcomponentFactory implements ActivityBindingModule_BindSignupFragment.SignupFragmentSubcomponent.Factory {
    @Override
    public ActivityBindingModule_BindSignupFragment.SignupFragmentSubcomponent create(
        SignupFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SignupFragmentSubcomponentImpl(arg0);
    }
  }

  private final class SignupFragmentSubcomponentImpl implements ActivityBindingModule_BindSignupFragment.SignupFragmentSubcomponent {
    private SignupFragmentSubcomponentImpl(SignupFragment arg0) {

    }

    @Override
    public void inject(SignupFragment arg0) {
      injectSignupFragment(arg0);}

    private SignupFragment injectSignupFragment(SignupFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class LoginFragmentSubcomponentFactory implements ActivityBindingModule_BindLoginFragment.LoginFragmentSubcomponent.Factory {
    @Override
    public ActivityBindingModule_BindLoginFragment.LoginFragmentSubcomponent create(
        LoginFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginFragmentSubcomponentImpl(arg0);
    }
  }

  private final class LoginFragmentSubcomponentImpl implements ActivityBindingModule_BindLoginFragment.LoginFragmentSubcomponent {
    private LoginFragmentSubcomponentImpl(LoginFragment arg0) {

    }

    @Override
    public void inject(LoginFragment arg0) {
      injectLoginFragment(arg0);}

    private LoginFragment injectLoginFragment(LoginFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class ListCategoryFragmentSubcomponentFactory implements ActivityBindingModule_BindListCategoryFragment.ListCategoryFragmentSubcomponent.Factory {
    @Override
    public ActivityBindingModule_BindListCategoryFragment.ListCategoryFragmentSubcomponent create(
        ListCategoryFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new ListCategoryFragmentSubcomponentImpl(arg0);
    }
  }

  private final class ListCategoryFragmentSubcomponentImpl implements ActivityBindingModule_BindListCategoryFragment.ListCategoryFragmentSubcomponent {
    private ListCategoryFragmentSubcomponentImpl(ListCategoryFragment arg0) {

    }

    @Override
    public void inject(ListCategoryFragment arg0) {
      injectListCategoryFragment(arg0);}

    private ListCategoryFragment injectListCategoryFragment(ListCategoryFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      BaseFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
